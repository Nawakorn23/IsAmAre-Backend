@startuml
title "Coworking"
participant "User" as user
participant "Admin" as admin
participant "Server" as serverUML
participant "<<routes>>\ncoworkings" as routesUML 
participant "<<middleware>>\nauth" as middlewareUML
participant "<<controllers>>\ncoworking" as controlCoWorking
participant "<<models>>\nUser" as modelsUser
participant "<<models>>\nCoworking" as modelsCoworking
participant "MongoDB" as mongodbUML
   
   user ++
   admin ++
   serverUML ++
   routesUML ++
   middlewareUML ++
   modelsUser ++
   controlCoWorking ++
   modelsCoworking ++
   mongodbUML ++
   
/'getCoworkings All ????????????????????????'/  
opt
   user -> serverUML :req.get('/api/project/coworkings')
   admin -> serverUML 
   serverUML -> routesUML :app.use('/api/project/coworkings', coworkings)
   routesUML -> controlCoWorking :get('/',getCoworkings)
   controlCoWorking -> modelsCoworking :Coworking.find(JSON.parse(queryStr)).populate('reservations')
   modelsCoworking -> mongodbUML :find(JSON.parse(queryStr)).populate('reservations')
   mongodbUML --> modelsCoworking :coworkings
   modelsCoworking --> controlCoWorking :coworkings
   controlCoWorking -> controlCoWorking :req.query.select
   controlCoWorking -> controlCoWorking :req.query.sort
   controlCoWorking --> routesUML :response
   routesUML --> serverUML :response
   serverUML --> user :response
   serverUML --> admin
end

/'getCoworkings By Id ????????????????????????'/
opt
   user -> serverUML :req.get('/api/project/coworkings/:id')
   admin -> serverUML
   serverUML -> routesUML :app.use("/api/project/coworkings", coworkings);
   routesUML -> controlCoWorking :get('/:id',getCoworking)
   controlCoWorking -> modelsCoworking :Coworking.findById(req.params.id)
   modelsCoworking -> mongodbUML :findById(req.params.id)
   mongodbUML --> modelsCoworking :Coworking
   modelsCoworking --> controlCoWorking :coworking
   controlCoWorking --> routesUML :response
   routesUML --> serverUML :response
   serverUML --> admin :response
end

/'createCoworking user admin '/
opt
   admin -> serverUML : req.post('/api/project/coworkings')
   serverUML ->  routesUML:app.use('/api/project/coworkings', coworkings)
   routesUML -> middlewareUML:protect(token)
   middlewareUML-> middlewareUML :decoded
   middlewareUML-> modelsUser :User.findById(decoded.id)
   modelsUser-> mongodbUML :findById(decoded.id)
   mongodbUML --> modelsUser :user
   modelsUser --> middlewareUML :user
   middlewareUML -->routesUML :next()
   routesUML->middlewareUML :authorize('admin') 
   middlewareUML->middlewareUML :roles.includes(req.user.role)
   middlewareUML -->routesUML :next()
   routesUML -> controlCoWorking :post('/',createCoworking)
   controlCoWorking -> modelsCoworking :Coworking.create(req.body)
   modelsCoworking ->mongodbUML :create(req.body)
   mongodbUML --> modelsCoworking :coworking
   modelsCoworking --> controlCoWorking :coworking
   controlCoWorking --> routesUML :response
   routesUML --> serverUML :response
   serverUML --> admin :response
end

/'Admin Update Coworking   put(protect, authorize("admin"), updateCoworking)'/
opt
   admin -> serverUML : req.put('/api/project/coworkings/:id')
   serverUML ->  routesUML:app.use('/api/project/coworkings', coworkings)
   routesUML -> middlewareUML:protect(token)
   middlewareUML->middlewareUML :decoded
   middlewareUML->modelsUser :User.findById(decoded.id)
   modelsUser->mongodbUML :findById(decoded.id)
   mongodbUML --> modelsUser :user
   modelsUser --> middlewareUML :user
   middlewareUML -->routesUML :next()
   routesUML->middlewareUML :authorize('admin') 
   middlewareUML->middlewareUML :roles.includes(req.user.role)
   middlewareUML -->routesUML :next()
   routesUML -> controlCoWorking :put(':/id',updateCoworking)
   controlCoWorking -> modelsCoworking :Coworking.findByIdAndUpdate(req.params.id,\nreq.body,{new: true,runValidators: true,})
   modelsCoworking -> mongodbUML :findByIdAndUpdate(req.params.id,\nreq.body,{new: true,runValidators: true,})
   mongodbUML --> modelsCoworking :coworking
   modelsCoworking --> controlCoWorking :coworking
   controlCoWorking --> routesUML :response
   routesUML -->  serverUML :response
end

/'Admin Delete'/
opt
   admin->serverUML :req.delete('/api/project/coworkings/:id')
   serverUML->routesUML :app.use('/api/project/coworkings',\n coworkings)
   routesUML->middlewareUML :protect(token)
   middlewareUML->middlewareUML :decoded
   middlewareUML->modelsUser :User.findById(decoded.id)
   modelsUser->mongodbUML :findById(decoded.id)
   mongodbUML --> modelsUser :user
   modelsUser --> middlewareUML :user
   middlewareUML -->routesUML :next()
   routesUML->middlewareUML :authorize('admin') 
   middlewareUML->middlewareUML :roles.includes(req.user.role)
   middlewareUML -->routesUML :next()
   routesUML -> controlCoWorking :delete(':/id',deleteCoworking)
   controlCoWorking -> modelsCoworking :Coworking.findById(req.params.id)
   modelsCoworking -> mongodbUML :findById(req.params.id)
   mongodbUML --> modelsCoworking :coworking
   modelsCoworking --> controlCoWorking :coworking
   controlCoWorking -> modelsCoworking :coworking.deleteOne()
   modelsCoworking -> mongodbUML :deleteOne()
   mongodbUML --> modelsCoworking :response
   modelsCoworking --> controlCoWorking :response
   controlCoWorking --> routesUML :response
   routesUML --> serverUML :response
end

@enduml